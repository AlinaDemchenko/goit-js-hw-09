{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,QAAS,CACTC,WAAY,yBACZC,QAAS,CACPD,WAAY,6BAGhB,MAAME,EAAO,CACXC,KAAMC,SAASC,cAAc,SAyB/B,SAASC,EAAcC,EAAGC,GAU1B,OATkB,IAAIC,SAAQ,CAACC,EAASC,KACpC,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACPH,EACFF,EAAQ,C,EAACH,E,UAAGC,IAEZG,EAAO,C,EAACJ,E,UAAGC,GAAW,GACpBA,EAAYD,EAAE,G,CAItBL,EAAKC,KAAKa,iBAAiB,UAlC3B,SAAiBC,GACjBA,EAAIC,iBACJ,MAAMC,EAAY,GACVC,EAASlB,EAAKC,KAAKkB,SAASD,OAAOE,MACnCC,EAAYrB,EAAKC,KAAKkB,SAASG,KAAKF,MACpCG,EAAQvB,EAAKC,KAAKkB,SAASI,MAAMH,MACvCH,EAAUO,KAAKN,EAAQG,EAAWE,GAE9BN,EAAUQ,OAAMC,GAAIC,OAAOD,GAAM,IACnCb,YAAW,KACT,IAAK,IAAIe,EAAI,EAAGA,EAAIV,EAAQU,GAAK,EAChCxB,EAAcwB,EAAGP,GAAWQ,MAAK,EAACxB,EAACA,EAACC,UAAEA,MACrCZ,EAAAF,GAASG,OAAOI,QAAQ,uBAAqBM,EAAK,QAASC,EAAWD,EAAIsB,OAAGJ,OAAgB,IAE9FO,OAAM,EAACzB,EAACA,EAACC,UAAEA,MACVZ,EAAAF,GAASG,OAAOE,QAAQ,sBAAoBQ,EAAG,QAASC,EAAWD,EAAIsB,OAAGJ,OAAgB,GAC1F,GACAA,GAEJ7B,EAAAF,GAASG,OAAOE,QAAQ,0B","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nNotiflix.Notify.init({\n  failure: {\n  background: 'rgba(54, 56, 96, 0.5)'},\n  success: {\n    background: 'rgba(91, 196, 173, 0.8)'\n    },})\n\nconst refs = {\n  form: document.querySelector(\"form\")\n}\n\nfunction handler(evt){\nevt.preventDefault()\nconst arrValues = [];\n  const amount = refs.form.elements.amount.value;\n  const frequency = refs.form.elements.step.value;\n  const delay = refs.form.elements.delay.value;\n  arrValues.push(amount, frequency, delay)\n\n  if (arrValues.every(el=>Number(el) > 0)){\n    setTimeout(()=>{\n      for (let i = 0; i < amount; i += 1)\n      {createPromise(i, frequency).then(({i, frequency}) => {\n        Notiflix.Notify.success(`✅ Fulfilled promise ${i + 1} in ${frequency * i + Number(delay)}ms`);\n      })\n      .catch(({i, frequency }) => {\n        Notiflix.Notify.failure(`❌ Rejected promise ${i + 1} in ${frequency * i + Number(delay)}ms`);\n      });}\n     }, delay)}\n  else {\n    Notiflix.Notify.failure(\"Enter a positive value!\");}}\n\n \nfunction createPromise(i, frequency) {\n  const promise = new Promise((resolve, reject)=>{\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n    if (shouldResolve){\n      resolve({i, frequency})\n    } else{\n      reject({i, frequency})\n    }}, frequency * i)\n  })\nreturn promise}\n\nrefs.form.addEventListener('submit', handler)\n"],"names":["$7Y9D8","parcelRequire","$parcel$interopDefault","Notify","init","failure","background","success","$47d4ff9957288465$var$refs","form","document","querySelector","$47d4ff9957288465$var$createPromise","i","frequency","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","arrValues","amount","elements","value","frequency1","step","delay","push","every","el","Number","i1","then","catch"],"version":3,"file":"03-promises.e44a1d5c.js.map"}